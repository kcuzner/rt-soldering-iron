//! Bitmap font module that uses gfx

use gfx;

/// IBM 8x8 font, public domain
const FONT_8X8_DATA: [[u8; 8]; 37] = [
    [ 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00 ],   // U+0030 (0)
    [ 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 ],   // U+0031 (1)
    [ 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00 ],   // U+0032 (2)
    [ 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00 ],   // U+0033 (3)
    [ 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00 ],   // U+0034 (4)
    [ 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00 ],   // U+0035 (5)
    [ 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00 ],   // U+0036 (6)
    [ 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00 ],   // U+0037 (7)
    [ 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00 ],   // U+0038 (8)
    [ 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00 ],   // U+0039 (9)
    [ 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00 ],   // U+0041 (A)
    [ 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00 ],   // U+0042 (B)
    [ 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00 ],   // U+0043 (C)
    [ 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00 ],   // U+0044 (D)
    [ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00 ],   // U+0045 (E)
    [ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00 ],   // U+0046 (F)
    [ 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00 ],   // U+0047 (G)
    [ 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00 ],   // U+0048 (H)
    [ 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ],   // U+0049 (I)
    [ 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00 ],   // U+004A (J)
    [ 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00 ],   // U+004B (K)
    [ 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00 ],   // U+004C (L)
    [ 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00 ],   // U+004D (M)
    [ 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00 ],   // U+004E (N)
    [ 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00 ],   // U+004F (O)
    [ 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00 ],   // U+0050 (P)
    [ 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00 ],   // U+0051 (Q)
    [ 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00 ],   // U+0052 (R)
    [ 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00 ],   // U+0053 (S)
    [ 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ],   // U+0054 (T)
    [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00 ],   // U+0055 (U)
    [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ],   // U+0056 (V)
    [ 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00 ],   // U+0057 (W)
    [ 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00 ],   // U+0058 (X)
    [ 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00 ],   // U+0059 (Y)
    [ 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00 ],   // U+005A (Z)
    [ 0x1C, 0x36, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00 ],   // U+00B0 (degree)
];

/// Gets a character from the 8x8 font
///
/// Also consider using the `Font::get_character` method
pub fn get_8x8_character(character: char) -> Option<gfx::Bitmap<'static>> {
    if character.len_utf8() > 1 {
        return None
    }
    let literal: u8 = character as u8;
    match literal {
        b'0'...b'9' => Some(gfx::Bitmap::new(&FONT_8X8_DATA[(literal - b'0') as usize], 8, 8)),
        b'A'...b'Z' => Some(gfx::Bitmap::new(&FONT_8X8_DATA[(10 + literal - b'A') as usize], 8, 8)),
        0xB0 => Some(gfx::Bitmap::new(&FONT_8X8_DATA[36], 8, 8)),
        _ => None,
    }
}

/// Error stemming from font usage
#[derive(Debug, Clone)]
pub enum FontError {
    InvalidCharacter,
    GfxError(gfx::GfxError),
}

/// Fonts available for use
pub enum Font {
    EightByEight,
}

impl Font {
    /// Gets the character bitmap for the passed character
    pub fn get_character(&self, character: char) -> Option<gfx::Bitmap<'static>> {
        match self {
            &Font::EightByEight => get_8x8_character(character),
        }
    }

    /// Renders a string to the passed rendertarget a the passed point
    pub fn render_string<'a>(&self, string: &'a str, point: gfx::Point, target: &mut gfx::RenderTarget) -> Result<(), FontError> {
        let mut x = point.x;
        for c in string.chars() {
            match self.get_character(c) {
                Some(bitmap) => match target.render(&bitmap, bitmap.clone().into(), gfx::Point::new(x, point.y)) {
                    Err(e) => Err(FontError::GfxError(e)),
                    _ => {
                        x += bitmap.width();
                        Ok(())
                    },
                },
                None => Err(FontError::InvalidCharacter),
            }?;
        }
        Ok(())
    }
}

